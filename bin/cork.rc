#!/bin/rc
cd ..
fn awk_buffer { awk '{ buf = buf $0 "\n"; if (length(buf) > 1400) { printf "%s", buf; buf = "" } } END { printf "%s", buf }' }
fn cork {
    sitedir=sites/avsbq; master_template=`{get_lib_file default_master.tpl}; req_path=`{echo -n $REQUEST_URI}; req_url=$req_path; local_path=$sitedir$req_path; local_file=''; ifs='/' { args=`{echo -n $req_path} }; if (test -d $local_path) local_path=$local_path^'index'; cd $sitedir; req_paths_list='/'; conf_wd='/'
    for (i in $args) {
        conf_wd=$conf_wd^$i
        req_paths_list=($req_paths_list $conf_wd)
        conf_wd=$conf_wd'/'
        cd $i
    }
    cd $cork_root
    setup_handlers
    echo
    template $master_template
}
fn fltr_cache {
    a=()
    tmpf=()
    proc=$1
    shift
    if(~ $#* 0) {
        tmpf=/tmp/fmttmp.$pid
        f=$tmpf
        score=`{{tee $tmpf || exit 1} | sha1sum}
    }
    if not {
        f=$1
        if(~ $f */) {
            score=`{du -an $f | sha1sum || exit 1} # XXX using -n(bytes) instead of -t(lastmod) because sitemap proc touches files in tree.
            a=$f
            f=/dev/null
        }
        if not {
            score=`{sha1sum $f || exit 1}
            score=$score(1)
        }
    }
    cachedir=/tmp/fltr_cache/$score
    mkdir -p $cachedir >[2]/dev/null
    if(test -s $cachedir/$proc)
        cat $cachedir/$proc
    if not
        if($proc $a < $f | tee $cachedir/$pid)
            mv $cachedir/$pid $cachedir/$proc
    rm $tmpf $cachedir/$pid >[2]/dev/null &
}
fn get_lib_file { echo -n bin/default_master.tpl }
fn ll_add { _l=$1^_^$#$1; $_l=$*(2-); $1=( $$1 $_l ) }
fn md_handler { $fm $1 }
fn sbar { echo -n '<style>nav li ul{padding-left:.5em}body{display:flex;flex-wrap:wrap;margin:0 20%}article{flex:1}nav{min-width:12em}ul{list-style:none}nav ul{border-bottom:1px dashed;}img{width:150}pre{padding-left:4em}</style><nav><ul>'
    ls -F $sitedir/./$req_paths_list \
    | { sed $dirfilter'/\/[^\/]*(\.(md)|\/)$/!d; s!^'$sitedir'!!; '$dirclean } | sort -u | awk -F/ '
    function p(x, y, s) { for(i=0; i < x-y; i+=1) printf s }
    BEGIN { lNF=2; }
    { d = ""; if(match($0, "/$")) d = "/"; sub("/$", ""); p(NF, lNF, "<li><ul>"); p(lNF, NF, "</ul>"); lNF = NF; 
      fp = $NF d; path = $0 d; gsub(/[\-_]/, " ", fp); pa = path; gsub(/[^\/]$/, "&/", pa); 
      if(index(ENVIRON["req_path"] "/", pa) == 1) printf "<li><a href=" path ">> <b>"fp"</b></a>"; 
      else printf "<li><a href=" path ">"fp"</a>"; 
    } END { p(lNF, 2, "</ul>"); printf "</ul></nav>" }' }
fn run_handlers { for(h in $*) run_handler $$h }
fn run_handler { $*(1) $*(2-) }
fn setup_handlers { local_file=$local_path.md handler_body_main=(md_handler $local_file) }
fn template { awk -f bin/template.awk $* | rc $rcargs }
fm=(fltr_cache m2h.awk)
dirfilter='s/\*$//; s,/+\./+,/,g; s,^\./,,;'
# dirfilter='s/\*$//; s,/+\./+,/,g; s,^\./,,; /\/index\.(md)$/d;'
dirclean='s/\.(md)$//;'
path=(. /bin ./bin)
ll_add handlers_bar_left sbar 
cork_root=`{pwd}
cork
